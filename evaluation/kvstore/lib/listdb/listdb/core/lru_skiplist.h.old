#ifndef LISTDB_CORE_LRU_SKIPLIST_H_
#define LISTDB_CORE_LRU_SKIPLIST_H_

#define MUTEX mutex
#define MUTEX_HEADER <MUTEX>
#include MUTEX_HEADER

#include "listdb/common.h"
#include "listdb/index/lockfree_skiplist.h"

class LruSkipList {
 public:
  struct Node {
    Key key;       // integer value or offset
    uint64_t tag;  // seqorder (56-bit), op (4-bit), height (4-bit)
    uint64_t value;     // integer value or offset, (SHORTCUT: pointer to next memtable node)
    std::atomic<Node*> next[1];

    static uint64_t head_key() { return 0ULL; }

    static size_t compute_alloc_size(const Key& key, const int height) {
      return aligned_size(8, sizeof(Node) + (height-1)*8);
    }

    int height() const { return tag & 0xf; }
    size_t alloc_size() const { return sizeof(Node) + (height() - 1) * 8; }
    uint8_t type() const { return ValueType((tag & 0xf0) >> 4); }
    char* data() const { return (char*) this; }
  };

  struct LruNode {
    //Key key;
    uint64_t value;  //uint64_t value;
    Node* skiplist_node;
    LruNode* next;
    LruNode* prev;
  };

  LruSkipList(const size_t capacity);

  // Returns cached value of the largest key among keys less than a given key
  // Returns 0 if the found result is head node of the SkipList
  uint64_t FindLessThan(const Key& key);

  void Insert(const Key& key, const uint64_t value, const int height);

 private:
  void FindPosition(Node* node, Node* preds[], Node* succs[]);

  const size_t capacity_;  // in number of nodes
  size_t size_;  // in number of nodes
  Node* head_;
  LruNode* lru_head_;
  std::MUTEX mu_;
};

LruSkipList::LruSkipList(const size_t capacity) : capacity_(capacity), size_(0) {
  // Init head
  size_t node_size = sizeof(Node) + (kLruMaxHeight - 1) * 8;
  Node* new_node = (Node*) aligned_alloc(8, node_size);
  LruNode* new_lru_node = (LruNode*) aligned_alloc(8, sizeof(LruNode));

  new_node->key = Node::head_key();
  new_node->tag = kLruMaxHeight & 0xf;
  new_node->value = 0;
  memset(new_node->next, 0, kLruMaxHeight * 8);

  new_lru_node->value = 0;
  new_lru_node->skiplist_node = nullptr;
  // TODO: check this is valid
  new_lru_node->next = new_lru_node;
  new_lru_node->prev = new_lru_node;

  head_ = new_node;
  lru_head_ = new_lru_node;
  std::atomic_thread_fence(std::memory_order_release);
}

uint64_t LruSkipList::FindLessThan(const Key& key) {
  Node* pred = head_;
  Node* curr = nullptr;
  int h = pred->height();
  for (int l = h - 1; l >= 0; l--) {
    while (true) {
      curr = pred->next[l].load(std::memory_order_relaxed);
      if (curr && curr->key.Compare(key) < 0) {
        pred = curr;
        continue;
      }
      break;
    }
  }

  LruNode* found = reinterpret_cast<LruNode*>(pred->value);  // less than

  //return (found) ? found->value : 0;

  if (found) {
    // Move found node to MRU position
    std::unique_lock<std::MUTEX> lk(mu_); 
    auto tail = lru_head_->prev;
    if (found != tail) {
      found->prev->next = found->next;
      found->next->prev = found->prev;
      lru_head_->prev = found;
      found->next = lru_head_;
      found->prev = tail;
      tail->next = found;
    }
    lk.unlock();
    return found->value;
  }
  return 0;
}

void LruSkipList::Insert(const Key& key, const uint64_t value, const int height) {
  // Alloc SkipList node and LRU list node
  size_t node_size = sizeof(Node) + (height - 1) * 8;
  //Node* new_node = (Node*) aligned_alloc(8, node_size);
  //LruNode* new_lru_node = (LruNode*) aligned_alloc(8, sizeof(LruNode));
  Node* new_node = (Node*) aligned_alloc(8, node_size + sizeof(LruNode));
  LruNode* new_lru_node = (LruNode*) ((uint64_t) new_node + node_size);

  // Init SkipList node
  new_node->key = key;
  new_node->tag = height & 0xf;
  new_node->value = (uint64_t) new_lru_node;
  memset(new_node->next, 0, height * 8);

  // Init LRU list node
  new_lru_node->value = value;
  new_lru_node->skiplist_node = new_node;

  // TODO: Evict

  // Insert new LRU node at MRU position
  std::unique_lock<std::MUTEX> lk(mu_); 
  auto tail = lru_head_->prev;
  lru_head_->prev = new_lru_node;
  new_lru_node->next = lru_head_;
  new_lru_node->prev = tail;
  tail->next = new_lru_node;
  lk.unlock();

  // Insert new node into SkipList
  Node* preds[kLruMaxHeight];
  Node* succs[kLruMaxHeight];
  while (true) {
    FindPosition(new_node, preds, succs);
    for (int l = 0; l < new_node->height(); l++) {
      new_node->next[l].store(succs[l], std::memory_order_relaxed);
    }
    if (!preds[0]->next[0].compare_exchange_strong(succs[0], new_node)) {
      continue;
    }
    for (int l = 1; l < new_node->height(); l++) {
      while (true) {
        if (preds[l]->next[l].compare_exchange_strong(succs[l], new_node)) {
          break;
        }
        FindPosition(new_node, preds, succs);
      }
    }
    break;
  }
}

void LruSkipList::FindPosition(Node* node, Node* preds[], Node* succs[]) {
  Node* pred = head_;
  Node* curr = nullptr;
  int h = pred->height();
  for (int l = h - 1; l >= 0; l--) {
    while (true) {
      curr = pred->next[l].load(std::memory_order_relaxed);
      if (curr && curr->key.Compare(node->key) < 0) {
        pred = curr;
        continue;
      }
      break;
    }
    preds[l] = pred;
    succs[l] = curr;
  }
}

#endif  // LISTDB_CORE_LRU_SKIPLIST_H_
